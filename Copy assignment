Stack::Stack (const Stack& RHS)
{
  topPtr = new node ;  //topPtr is already made, and non-dynamic or stack-based variables are already copied by this point, so we are just accessing the pointer here that is already created 
  topPtr -> info = RHS.topPtr->info ;
   
  node* currRHS = RHS.topPtr -> next;
  //node* curr = topPtr -> next; //curr points to the new object's firstptr's object 
   
  node* curr = topPtr ;
   
  while(currRHS != NULL)
  {
    curr -> next = new node ;
    curr = curr -> next ;
    curr -> info = currRHS -> info ;
     
    currRHS = currRHS -> next ;
  }
}
 
const Stack& Stack::operator=(const Stack& RHS)
{
   
  this -> ~Stack() ; //Calling the destructor of this object(LHS) to zero it out first
  topPtr = new node ;
  topPtr -> info = RHS.topPtr -> info ;
   
  node* currRHS = RHS.topPtr -> next ;
  node* curr = topPtr ;
   
 
  while(currRHS != NULL)
  {
    curr -> next = new node ;
    curr = curr -> next ;
    curr -> info = currRHS -> info ;
     
    currRHS = currRHS -> next ;
  }
  return *this ;
}
Playground- Seeing the changes real time without having to compile and executing.watching the value in a variable displayed on side bar
Statically typed language- safe, relatively faster, but adopts easy and safety features from other languages like Python, C++, Scala
has to have a default switch case, bracekts in if else avoiding subtle errors

