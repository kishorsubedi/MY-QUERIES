#include <iostream>
#include <fstream>
#include <string>
using namespace std;
 
//specification
class customerType
{
public:
    string name;
    int id;
    string address;
    char gender;
};
 
struct nodeType
{
    customerType info;
    nodeType* next;
};
 
class queueType
{
public:
    queueType();
    ~queueType();
    void enqueue(nodeType*); //add to end
    nodeType dequeue(); //remove from front
    void printlist();
private:
    nodeType* qfront;
    nodeType* qrear;
};

queueType:: queueType()
{
  qfront = NULL ;
  qrear = NULL ;
}

queueType::~queueType() //Destructs the dynamic nodes at the end of the program
{
  nodeType* hold ;
  while (qfront)
  {
    hold = qfront -> next ;
    delete qfront ;
    qfront = hold ;
  }
  
}
void queueType::enqueue(nodeType* objptr)
{
  if(!qfront) //qfront == NULL 
  {
    qfront = objptr ;
    qfront -> next = NULL ;
    qrear = qfront ;
  }
  else //qrear has to point to the objptr's object
  {
    nodeType* curr = qfront ;
    while (curr -> next != NULL)
    {
      curr = curr -> next ;
    }
    curr -> next = objptr;
    curr -> next -> next = NULL ;
    qrear = objptr ;
  }
}

nodeType queueType::dequeue() 
{
  if(qfront != NULL) //Only dequeue if qfront doesn't point to NULL 
  {
    nodeType temp ;
    temp.info = qfront-> info ;
    temp.next = NULL ;
    nodeType* hold = qfront -> next ;
    delete qfront ;
    qfront = hold ;
    
    return temp;
  }
}

 void queueType::printlist()
 {
   nodeType* curr = qfront ;
   while (curr != NULL)
   {
     cout << curr->info.name << endl;
     curr = curr -> next ;
   }
   cout << endl << endl ;
 }
int main()
{
  ifstream myfile ;
  myfile.open("infile.txt");
  queueType Queue;
  
  string fname, lname, st_no, st_name, st_type, city, state, zip;
  
  customerType customer ;
  myfile >> lname >> fname ; //PRIMING READ
  customer.name = fname + lname ;
  myfile >> customer.id >> st_no >> st_name >> st_type >> city >> state >> zip >> customer.gender;
  customer.address = st_no + st_name + st_type + city + state + zip;
    
  while(myfile)
  {
    nodeType* temp = new nodeType;
    temp -> info = customer;
    Queue.enqueue(temp);
    myfile >> lname >> fname ;
    customer.name = fname + lname ;
    myfile >> customer.id >> st_no >> st_name >> st_type >> city >> state >> zip >> customer.gender;
    customer.address = st_no + st_name + st_type + city + state + zip;
  }
  Queue.printlist() ;
  
  Queue.dequeue() ;
  Queue.dequeue() ;
  Queue.dequeue() ;
  
  Queue.printlist() ;
  return 0 ;
}
/*
JillHerold,
StanJackson,
FrancisJerry,
WilsonJoan,
StanleySmith,
ClaudeClaire,
SanRodriguez,
MaryRobinson,
AmeliaElliot,
SolRemeaux,
FrancisBacon,


WilsonJoan,
StanleySmith,
ClaudeClaire,
SanRodriguez,
MaryRobinson,
AmeliaElliot,
SolRemeaux,
FrancisBacon,

*/

